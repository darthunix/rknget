Краткая документация по проекту

Предисловие

Основной целью создания набора программ является переход от наколенных скриптов к полноценной системе, в которой можно отслеживать все ситуации, исключения и ошибки как со стороны провайдера, так и со стороны ведомства. Данный проект позволил существенно уменьшить риски судебных разбирательств и штрафов, а также улучшить мониторинг работы сетевых сервисов в условиях постоянного реконфигурирования.

Источником данных является файл дампа, скачиваемый через сервис выгрузок РКН. Он разбирается и заносится в базу данных, из которой затем другие программы забирают нужную им информацию через вебсервис. База данных является отражением дампа со всей его информацией, проверенной на корректность и конвертированной в корректную кодировку. С одной стороны, данные инкрементальны, т.е. можно отследить, когда они появились в дампе. С другой, существует жёсткая привязка к уникальному id и hash записи контента, а он может меняться, и это отследить нельзя. Точнее, можно было бы, но это привело бы к чрезмерному распуханию базы данных. К тому же, никто не ожидал, что РКН начнёт добавлять новые ресурсы по уже отработанным решениям ведомств.

Таблицы

0. dumpinfo - соответствует корневому тегу, содержит информацию о последнем удачно спарсенном дампе.
1. content - соответствует тегу content и его полям, outer_id - это уникальный id записи из дампа, он же "id записи реестра"
2. blocktype - тип блокировки контента из дампа, согласно документации по выгрузке.
3. decision - решение организации о блокировке.
4. organisation - данные по организацииб, ведомству.
5. entrytype - таблица реестров, согласно документации по выгрузке; статичный справочник.
6. resource - таблица ресурсов, отсюда API берёт все данные.
7. entitytype - тип ресурса, схож с blocktype, но вывставляется на основе тега и обрабатываемых данных.
8. log - служебная таблица, в которой отслеживаются программы, работающие с данными.

Ещё раз: entitytype относится к ресурсу, blocktype - к типу блокировки контента.

Программы

0. Общие принципы работы программ

Каждая из программ имеет своё утилитарное назначение, но все они работают по одному и тому же принципу:
a) Обращение к БД идёт через WEB API, без него работать ничего не будет.
b) Создаётся PID-запись в БД с именем программы. Это позволяет избежать двойного проникновения с последующим развратом. Если вам необходимо запускать несколько одинаковых экземпляров программ, смените procname в разделе Global конфига, либо просто поменяйте имя исполняемого файла, либо поставьте forcerun=True в файле конфигурации.
c) По окончании работы программа записывает код возврата и краткий результат работы в таблицу log.
d) Для работы по расписанию создайте запись в cron. Не забудьте сделать файл исполняемым и позаботьтесь о путях.

1. common

Библиотеки, содержащие функции, используемые большинством рабочих программ.
Не требуются для вебсервера.
webconn требуется всеми программами для работы с web api.
В качестве аргументов принимает кучу параметров вебсервера (описано в комментариях), обязательные параметры module и metho, а также kwargs в качестве параметров вызова функции на "той стороне".
Вызов WEB API выглядит следующим образом:
parse_result = webconn.call(module='api.dumpparse',
                            method='parse',
                            xmldump=xmldump,
                            **config['API'])
В данном случае на сервере вызывается функция parse(xmldump) модуля api.dumpparse, где параметр xmldump, как и прочие параметры вызова функции, передаются посредством CGI.
Получаемые данные вебсервера парсятся и возвращаются функцией.

2. rkn

2.1. api

Модули, работающие с данными БД.
dbutils - утилиты для сырой работы с БД (используются rkncli)
parseutils - модуль утилит.
Является уровнем абстракции над базой данных: БД возвращает сырые данные, API - годные. В большинстве случаев.
С точки зрения стандартизации, возможно, стоило бы использовать JSON-RPC, но для меня пробрасывать kwargs и написать примитивный API оказалось проще.

2.2. db

Модули, работающие напрямую с БД.

2.3.
dbconn - конфигурация подключения к БД.
webapi, webjsonapi - примитивные программы, преобразующие входящие параметры в вызовы модулей и их функций. 
Первый работает с Content-Type: text/plain, второй - с Content-type:application/json.
JSON WEB API используется во всех программах и желателен.
PLAIN WEB API удобен для получения данных, особенно по ссылке через curl/wget.

Запрос должен быть представлен в виде словаря со следующими записями:
module - путь модуля относительно программы WEB API
method - имя функции
params - параметры функции

Пример GET-запроса:
http://rkn-dev/cgi-bin/rknget/rkn/webapi.py?module=api.restrictions&method=getBlockedPrefixess&collapse=False&ipv6=False&srcenttys=domain

Для упрощения доступа к WEB API программы используют модуль webconn, о котором написано выше.

Для кэширования запросов к API рекомендуется подключить Redis. Небольшой ценой дополнительной памяти он будет кэшировать только читающие запросы и только в промежутке между обновлениями БД из дампа.

3. config.yml

У каждой программы имеется свой YAML-файл конфигурации.
Его можно указать ключём -c, либо по умолчанию используется config.yml в каталоге исполнения.

Типичные разделы конфигурации:

Global: - общие параметры
  tmppath: - путь к временным файлам, создаётся при запуске, если отсутствует.
  forcerun: - принудительное выполнение, несмотря на работающие копии (если они мертвы, лучше разблокировать их через rkncli)
  saveconf: - сохранить генерируемые (-ые) конфигурацию (-ии).
  procname: - позволяет задать кастомное название запускаемого инстанса (см. пункт 0.b)

API: - параметры доступа к WEB API, без них программа работать не будет
  host: - хост
  port: - порт веб службы
  url: - путь к программе WEB API
  secure: - использовать TLS или нет
  timeout: - таймаут HTTP-сессии

Logging: - параметры логирования
  logpath: - путь к файлу лога
  stdoutlvl: - уровень детализации stdout-лога
  logfilelvl: уровень детализации файлового лога

Extra: - типы ресурсов, из которых дополнительно нужно взять блокировки (srcenttys - source entitytypes)
  - https
  - domain
  - domain-mask

По умолчанию методы API выдают заблокированные ресурсы согласно их blocktype в записях content дампа. Чаще всего этого не достаточно, особенно учитывая принцип работы АС Ревизор. Для этого применяется дополнительная блокировка ресурсов, связанных в рамках одной записи content.
Пример выше в конфигурации rkn-bird означает, что заблокированы будут все IP также для сущностей https, domain и domain-mask.

4. rkn-bird

Программа, реализующая блокировки по IP и IP Subnet.
Создаёт дополнение к конфигурации bird, чтобы тот делал BGP-анонсы маршрутов на граничные маршрутизаторы.
Чтобы анонсировать и IPv4, и IPv6, необходимо выполнить программу с двумя разными конфигурациями под оба протокола (должны различаться параметры confpath, stubip и ipv6); в первом из которых в restartcmd можно прописать /bin/true, чтобы лишний раз не трогать демон bird. Оба дополнения должны быть included в конфигурации демона.

Разделы конфигурации:

Bird:
  restartcmd: - команда рестарта демона
  confpath: - путь генерируемой конфигурации, которую директивой include подключит демон после перезапуска
  collapse: - удалять дублируемые ip/подсети, поглащать ip их подсетями, объединять смежные подсети и ip в подсети
  stubip: - IP адрес заглушки, куда будут маршрутизироваться анонсируемые подсети
  ipv6: Выгружать IPv6 адреса и подсети вместо IPv4.
  limit: - предельное количество анонсируемых маршрутов, защищает от смерти маршрутизаторов.

5. rkn-f5

Программа, реализующая блокировки по HTTP URL.
Формирует JSON-конфигурацию для datagroup и отсылает её на BIGIP F5 через WEB API.

Разделы конфигурацииdumpinfo:

F5:
  - host: - хост
    port: - порт API F5
    secure: - использовать TLS или нет
    datagroup: - имя datagroup на F5
    user: - пользователь
    password: - пароль
    timeout: - таймаут; F5 рвёт сессию по истечении 120 секунд
  - host: - следующий хост в списке, со своими параметрами, и так далее

Так как АС Ревизор делает проверки при помощи curl http://resource, его можно перехитрить, блокируя ip и domain только по HTTP.
Например, вот так http://192.0.2.253
Этот функционал реализован для избежания ситуаций, когда, например, ресурс блокируется по DNS (как положено в документации на сайте РКН), а Ревизор делает curl -H 'Host: example.org' http://192.0.2.253, получает HTTP 200 OK и рапортует о нарушении.
Помните, что корректность работы не гарантирована априори. Используйте на свой страх и риск.

Extra: - Имеет несколько другой формат и механизм добавления, нежели в общем случае
  https: - добавить https urls в список
  domain: - добавить домены в список
  domain-mask: - добавить домены без *. в список (субдомены авторы "Ревизора" проверять не стали)
  truncate-after: 200000 - ограничить список выгрузки в F5 данным числом записей; на случай, если вдруг получилось слишком много, и это может сломать железные прокси.

6. rkn-unbound

Программа, реализующая блокировки по domain и domain-mask.
В режиме онлайн обращается к демону unbound через unbound-control, загружая и выгружая зоны, не теряя кэша DNS-рекурсера. Генерирует дополнение к конфигурации unbound, которую подгружает основной conf-файл через директиву include.
Согласно документации, для доменов создаёт зону transparent, для wildcard-доменов - зону redirect.
Может работь без root привилегий, если дать доступ пользователю, от имени которого запускается модуль, доступ к сертификатам аутентификации в /etc/unbound (unbound_control.key, unbound_control.pem).
Обратите внимание: после смены или добавления типа фильтрации (stubip, stubipv6) необходимо сделать прогон программы и выполнить unbound-control reload.

Разделы конфигурации:

Unbound:
  binarypath: - путь к unbound-control
  confpath: - путь генерируемой конфигурации, которую директивой include подключит демон после перезапуска 
  collapse: - удалять домены, которые перекрываются wildcard-доменами
  stubip: 10.1.1.3 - IP-адрес, в который разрешаются блокируемые домены
  stubipv6: 2001:0db8:11a3:09d7:1f34:8a2e:07a0:765d - IPV6-адрес для AAAA-записей, должен быть записан в полном формате.

7. rknget

Программа, переводящая дамп в БД.
Требует для работы 2 файла: request.xml (файл с данными организации) и request.xml.sig (контейнер цифровой подписи).
Осуществляет загрузку XML-дампа с сервиса выгрузок РКН, его парсинг, импорт в БД и блокировку ресурсов.

rknsoapwrapper - модуль класса доступа к SOAP API службы выгрузок. Используется проверки актуальности дампа выгрузки, его затребования и скачивания с сервиса выгрузок. 

Разделы конфигурации:

Global:
  savedump: - сохранять ли загруженный дамп в dumpPath
  dumpPath: - путь к дампу
  reqPath: - путь к request.xml
  reqPathSig: - путь к request.xml.sig

DumpLoader:
  url: путь к WSDL API РКН
  retrycount: - количество попыток загрузки дампа
  conntimeout: - таймаут соединения
  sleeptimeout: - таймаут сна перед очередной попыткой загрузки 
  SoapVersion: - версия SOAP
  dumpfmtver: - версия выгружаемого дампа

Miscellaneous:
  custom: True - Блокировать ресурсы, добавленные пользователем 
  uselocaldump: False - Парсить локальный дамп в dumpPath, а не скачивать с сервиса. Делитесь дампами, не стесняйтесь.

8. rkngetdirect

Аналог rknget, работающий с БД напрямую.
Работает быстрее и потребляет в 3 раза меньше памяти.
Удобен для установки all-in-one, на одном сервере с этим скриптом будут находиться БД и WEB API.
Требует каталог rkn со всем API, лежащий рядом с каталогом программы.

Также нуждается в модуле rknsoapwrapper.

9. rkncli

Утилита командной строки (CLI).
В отличие от других программ, не создаёт PID-запись в базе данных.
Не ведёт лог. Не создаёт путей.
По сути, делает простой парсинг аргументов в вызов WEB API.
Использует функции api.dbutils, которые возвращают plain text для вывода в терминал.
Часто использует в качестве ключа content.outer_id - это id записей content из дампа.

./rkncli.py - показывает подробную справку и каркас аргументов

./rkncli.py --help - показывает краткую справку

При наличии config.yml с разделом API не нужждается в аргументе -c (см. раздел 3).
Во избежание выстрела в ногу использует безопасные функции:
content del - удаляет запись content вместе с ресурсами
content get - показывает данные content по outer_id, со всеми зависимыми ресурсами (опционально)

dumpinfo show - показывает данные последнего удачного парсинга
dumpinfo stats - показывает данные по ресурсам

resource add entitytype value - создаёт дополнительный ресурс
resource del entitytype value - удаляет дополнительный ресурс
resource find entitytype, value [all|columns] - ищет все ресурсы по вхождению субстроки в value, отображает заданные колонки, но не более, чем в all

process get [procname|all] - показывает активные программы с заданным procname
process del [procname|all] - разблокирует программы с заданным procname; обычно нужно, если программа вылетела в середине исполнения, а следующий экземпляр отказывается запускаться

decision get - отображает информацию по решению органов, связанную с данным outer_id
decision info - то же самое, но по decision id

Примеры использования:

./rkncli.py resource find domain '' value is_banned | grep True - отображение custom ресурсов типа domain
./rkncli.py resource add domain playtunez.com - добавление custom ресурса типа domain
./rkncli.py resource find domain 'rutracker.org' outer_id - поиск внешнего ID нужного ресурса
./rkncli.py content get 262698 - информация о строке content по известному внешнему ID
./rkncli.py decision get 262698 - информация об основании блокировки
./rkncli.py process del all - разблокировка программ, вылетевших без кода завершения
watch -n 10 './rkncli.py process last all 10' - мониторинг последних 10 запущенных программ
